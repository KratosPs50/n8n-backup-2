{
  "createdAt": "2025-08-20T12:45:48.481Z",
  "updatedAt": "2025-08-25T20:04:21.068Z",
  "id": "NsL1gXb9W2v6ZAz7",
  "name": "Criador de contas Flexhome v1",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "id": "db16148e-95bc-4d4c-971a-d232ec36e5b4",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        560,
        -224
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "sheetId": "1DmOxQMDzsV7Bt7yy5OOoZum4Rw3XU_9PeWileR3e0M4",
        "range": "A:Z",
        "options": {
          "valueRenderMode": "UNFORMATTED_VALUE"
        }
      },
      "id": "4d3940c4-2f88-4cda-97db-863cadc7870a",
      "name": "Read Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        832,
        -224
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "pb4yzlmXfMN4YYQj",
          "name": "Google Sheets account Jefferson"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nconst START_AVATAR_ID = 8000;  // novo ponto inicial\nconst SHEET_NAME = 'PUT_SHEET_NAME';\n\nfunction colToLetter(n){ let s=''; n++; while(n>0){let m=(n-1)%26; s=String.fromCharCode(65+m)+s; n=Math.floor((n-m)/26);} return s; }\nfunction nowSQL(){ const d=new Date(); return d.toISOString().slice(0,19).replace('T',' '); }\nfunction todayYMD(){ const d=new Date(); const y=d.getFullYear(); const m=String(d.getMonth()+1).padStart(2,'0'); const dd=String(d.getDate()).padStart(2,'0'); return `${y}-${m}-${dd}`; }\nfunction normalizePhone(p){ if(p===undefined||p===null) return ''; return String(p).replace(/[^0-9+]/g,''); }\nfunction mkLink(label,url){ if(!url) return label+':<br>'; const s=String(url).trim(); const d=s.replace(/^https?:\\/\\//,''); return `${label}: <a href=\"${s}\" target=\"_blank\" rel=\"noopener\">${d}</a><br>`; }\n\nlet rows = [];\nif (items.length === 1 && Array.isArray(items[0].json)) {\n  rows = items[0].json;\n} else {\n  rows = items.map(i => i.json);\n}\nif (!rows || !rows.length) return [];\n\nconst headers = Object.keys(rows[0]);\nconst lower = headers.map(h=>h.toLowerCase());\nconst idxStatus = lower.indexOf('status');\nconst idxNome = lower.indexOf('nome');\nconst idxSobrenome = lower.indexOf('sobrenome');\nconst idxUser = lower.indexOf('nome de usuário') !== -1 ? lower.indexOf('nome de usuário') : lower.indexOf('nome de usuario');\nconst idxEmpresa = lower.indexOf('nome da empresa');\nconst idxTelefone = lower.indexOf('telefone');\nconst idxEmail = lower.indexOf('email');\nconst idxWhats = lower.indexOf('whatsapp (link)') !== -1 ? lower.indexOf('whatsapp (link)') : lower.indexOf('whatsapp');\nconst idxSite  = lower.indexOf('site (link)') !== -1 ? lower.indexOf('site (link)') : lower.indexOf('site');\nconst idxDrive = lower.indexOf('google drive (link)') !== -1 ? lower.indexOf('google drive (link)') : lower.indexOf('google drive');\nconst idxTour  = lower.indexOf('tour virtual (link)') !== -1 ? lower.indexOf('tour virtual (link)') : lower.indexOf('tour virtual');\nconst idxCorretor = lower.indexOf('corretor (link)') !== -1 ? lower.indexOf('corretor (link)') : lower.indexOf('corretor');\nconst idxImob = lower.indexOf('imobiliária (link)') !== -1 ? lower.indexOf('imobiliária (link)') : (lower.indexOf('imobiliaria (link)') !== -1 ? lower.indexOf('imobiliaria (link)') : (lower.indexOf('imobiliária') !== -1 ? lower.indexOf('imobiliária') : lower.indexOf('imobiliaria')));\nconst idxParc = lower.indexOf('parceria e incorporadora (link)') !== -1 ? lower.indexOf('parceria e incorporadora (link)') : lower.indexOf('parceria e incorporadora');\n\n\nconst doneRegex = /^feito\\b/i;\nlet alreadyDone = 0;\nrows.forEach((r)=>{ const status = r[headers[idxStatus]]; if (status && doneRegex.test(String(status))) alreadyDone++; });\n\nconst ts = nowSQL();\nconst today = todayYMD();\n\nconst out = [];\nlet seq = 0;\nrows.forEach((r, i)=>{\n  const status = r[headers[idxStatus]];\n  if (status && doneRegex.test(String(status))) return;\n\n  const first_name = r[headers[idxNome]] || '';\n  const last_name  = r[headers[idxSobrenome]] || '';\n  const username   = idxUser !== -1 ? (r[headers[idxUser]] || '') : '';\n  const company    = r[headers[idxEmpresa]] || '';\n  const email      = r[headers[idxEmail]] || '';\n  const phone      = normalizePhone(r[headers[idxTelefone]]);\n\n  const whatsapp   = idxWhats !== -1 ? r[headers[idxWhats]] : '';\n  const site       = idxSite  !== -1 ? r[headers[idxSite]]  : '';\n  const drive      = idxDrive !== -1 ? r[headers[idxDrive]] : '';\n  const tour       = idxTour  !== -1 ? r[headers[idxTour]]  : '';\n  const corretor   = idxCorretor !== -1 ? r[headers[idxCorretor]] : '';\n  const imobili    = idxImob !== -1 ? r[headers[idxImob]] : '';\n  const parceria   = idxParc !== -1 ? r[headers[idxParc]] : '';\n\n  const description = `<p>${\n    mkLink('Whatsapp', whatsapp)\n  }${\n    mkLink('Site', site)\n  }${\n    mkLink('Google Drive', drive)\n  }${\n    mkLink('Tour Virtual', tour)\n  }${\n    mkLink('Corretor', corretor)\n  }${\n    mkLink('Imobiliária', imobili)\n  }${\n    mkLink('Parceria e Incorporadora', parceria)\n  }</p>`;\n\n  const avatar_id = START_AVATAR_ID + alreadyDone + seq;\n  seq++;\n\n  const statusColLetter = colToLetter(idxStatus);\n  const rowNumber = i + 2;\n  const statusRange = `${SHEET_NAME}!${statusColLetter}${rowNumber}:${statusColLetter}${rowNumber}`;\n  const statusValue = 'feito';\n\n  out.push({ json: {\n    first_name, last_name, username, company, email, phone,\n    dob: today,\n    description,\n    password: \"$2y$12$u2vpcP8OHySXh9/28130/ehLd3S2pG.cqJeUCdF6wR8thXb0g1Tsy\",\n    country_id: 12, state_id: 29, city_id: 3671,\n    now: ts,\n    avatar_id,\n    statusRange, statusValue,\n  }});\n});\n\nreturn out;\n"
      },
      "id": "e6033fbd-67d2-4ea2-ab57-636a9efde213",
      "name": "Select Unprocessed",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1120,
        -224
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "\nINSERT INTO `re_accounts`\n(`first_name`,`last_name`,`description`,`email`,`username`,`password`,\n `dob`,`phone`,`credits`,`confirmed_at`,`created_at`,`updated_at`,\n `is_featured`,`is_public_profile`,`company`,`country_id`,`state_id`,`city_id`,`approved_at`,`avatar_id`)\nVALUES\n(\n  '{{$json.first_name}}',\n  '{{$json.last_name}}',\n  '{{$json.description}}',\n  '{{$json.email}}',\n  '{{$json.username}}',\n  '{{$json.password}}',\n  '{{$json.dob}}',\n  '{{$json.phone}}',\n  0,\n  '{{$json.now}}',\n  '{{$json.now}}',\n  '{{$json.now}}',\n  0,\n  1,\n  '{{$json.company}}',\n  {{$json.country_id}},\n  {{$json.state_id}},\n  {{$json.city_id}},\n  '{{$json.now}}',\n  {{$json.avatar_id}}\n)\nON DUPLICATE KEY UPDATE\n  `first_name`=VALUES(`first_name`),\n  `last_name`=VALUES(`last_name`),\n  `description`=VALUES(`description`),\n  `username`=VALUES(`username`),\n  `phone`=VALUES(`phone`),\n  `company`=VALUES(`company`),\n  `country_id`=VALUES(`country_id`),\n  `state_id`=VALUES(`state_id`),\n  `city_id`=VALUES(`city_id`),\n  `updated_at`=VALUES(`updated_at`);\n"
      },
      "id": "dfe7238c-e9a9-4455-896b-c4eba6211457",
      "name": "Upsert in MySQL",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1440,
        -160
      ],
      "credentials": {
        "mySql": {
          "id": "JrG6Dcauvo7Uz7nE",
          "name": "MySQL account Stayou"
        }
      }
    },
    {
      "parameters": {
        "mode": "passThrough",
        "options": {}
      },
      "id": "de150eef-6446-4b78-a303-597921aa6f5c",
      "name": "Merge (pass-through)",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1760,
        -208
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "update",
        "sheetId": "1DmOxQMDzsV7Bt7yy5OOoZum4Rw3XU_9PeWileR3e0M4",
        "range": "={{$json.statusRange}}",
        "rawData": true,
        "options": {
          "valueInputMode": "RAW"
        }
      },
      "id": "94b14da1-dad3-42e7-bfa3-6f6c5e14ee98",
      "name": "Mark Done (Status)",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        2048,
        -208
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "pb4yzlmXfMN4YYQj",
          "name": "Google Sheets account Jefferson"
        }
      }
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Read Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Sheet": {
      "main": [
        [
          {
            "node": "Select Unprocessed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Unprocessed": {
      "main": [
        [
          {
            "node": "Upsert in MySQL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge (pass-through)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert in MySQL": {
      "main": [
        [
          {
            "node": "Merge (pass-through)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge (pass-through)": {
      "main": [
        [
          {
            "node": "Mark Done (Status)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "804bc389-e9fe-4f18-9174-ffa0e8618627",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-20T12:45:48.481Z",
      "updatedAt": "2025-08-20T12:45:48.481Z",
      "role": "workflow:owner",
      "workflowId": "NsL1gXb9W2v6ZAz7",
      "projectId": "I3gAC3xI6nBnmwxf"
    }
  ],
  "tags": []
}